Th1s is 0perational Cyber Training!

Range Considerations

  The ranges and associated VMs within PCTE rely on different automation and orchestration technologies to provide a realistic training and certification environment. The platform provides automatic configuration capabilities, simulated internet, and user emulation, which may be necessary for normal range function. These advanced capabilities leave artifacts behind in the ranges that may be visible during this course. These occurrences, also known as range-isms, are called out periodically in lessons to remind you of their presence. You must ignore or avoid interacting with these items. At best, they are minor annoyances that take up some extra space; at worst, interacting with them may cause the range to fail and require a redeployment. Some of these range-isms include:
The 10.0.0.0/8 subnet is used for range management and configuration.
WARNING: Do not interact with this subnet or it may cause an error in the range.There are several files, directories, and processes that are related to normal range operation. These items are off-limits and should not be interfered with. If uncovered within the context of an investigation, these items can be safely ignored, as they are not relevant to the investigation.systeminit.exe and all files related to this binaryjava.exe listening on port 49999 and 49998 java.exe communicating over port 5762, 15672, & 27017Advanced Message Queuing Protocol (AMQP) listening on port 5672Software or files located in C:\Program Files (x86)\Lincoln\Software or files located in C:\ProgramData\staging\Software or files located in C:\Program Files\Puppet Labs\Software or files located in C:\ProgramData\PuppetLabs\ Software or files located in C:\Program Files (x86)\SimSpace\ruby.exe on Windows and ruby on Linux

System call is an interupt with the CPU - allows user to mode to use kernel mode 

Ring 0 is most priveleged (kernel most damage) Ring 3 least priveleged used for apps

Process Structure in Memory

    During process creation, the OS allocates a block of memory to be used by that process. All of that process’s execution of code operations occurs within this memory block, which is divided into five main parts: text, data, Block Started by Symbol (BSS), heap, and stack. An additional piece of a process’s memory is reserved for use by the OS, and is used when the OS takes operations to manage that process. Text: Contains the machine instructions loaded from the executable. This is the actual set of instructions that the CPU executes.Data: Stores any variables that were initialized by the programmer or compiler. The initialization process requires the compiler to know how much memory is needed to store the variable, as well as the initial, non-zero value of the variable.BSS: Used to store variables that have been instantiated, but not initialized. This means that the compiler is able to determine how much memory is needed to store a variable, but the program has not set its value, or has set its value explicitly to zero.Heap: Used to dynamically allocate memory for variables whose sizes cannot be known until runtime, i.e., the actual execution of the program. This usually occurs when the size of the variable differs each time the program is run, so the compiler cannot assign a chunk of memory to the variable right off the bat. The heap can freely grow and shrink during program execution.Stack: Last In, First Out (LIFO) data structure used to store stack frames, which contain information about the current  execution sta te of the process. If a process has multiple threads, each thread is given its own stack. As an example, imagine that a thread is currently executing function1(), which contains a call to another function, function2(). When the call to function2() occurs, the current state of function1() is saved into the stack frame for function1() and placed on top of the stack. Then, a new stack frame is created to initialize function2(), itself being placed on top of the stack. When function2() eventually completes, execution is returned to function1() by loading the saved function1() stack frame, which includes loading the code within function1() that lies directly after the call to function2().

PIS is unique only for the process they are dynamic

Daemon Processes

  The root process is responsible for loading every other process necessary for the system to function. Usually, the root process delegates some of these responsibilities by spawning other processes known as daemon processes, or daemons, which manage certain components across the entire OS. For example, a network daemon might handle all network communication for the OS. Daemons usually run in the background and do not require direct interaction with a system user. In fact, daemons generally run continuously, even if no account is logged into the system.

            LOOK UP BEYOND COMPARE to check baseline
  On  Windows machines, daemon processes are referred to as services.

Index Nodes

 * The Linux kernel supports a large variety of filesystems compared to other OSs. This is because of a construct called the index node (inode) that exists as an abstraction layer within the Linux kernel. Inodes are an integral part of the Linux kernel; all file management behavior within Linux OSs deals directly with these inodes, requiring only that the Linux VFS perform small translation steps between the Linux kernel and the underlying concrete filesystem.

  *The behaviors made available by inodes include the creation of hard links and symbolic links, which themselves can be used in fairly interesting ways.

Socket System Calls

The following system calls (syscalls) are used by an application to request and utilize a socket. Prior to using any of these syscalls, the application must first request a socket from the kernel via a process known as socket instantiation.
bind: The application requests the kernel to bind a previously instantiated socket to a network port or to a local file. Binding to a local file is used for communication within the local system only. The bind syscall must be used if the socket intends to listen for incoming connections, and does not need to be used otherwise.listen: The application puts the socket into a listening state, meaning that the client application using the socket is actively ready to handle incoming connections. When an incoming connection is received, the application must choose to accept the connection or terminate it.accept: The application accepts an incoming connection to a listening socket. This does not affect the listening socket; a new socket object is created to handle the accepted connection. The accept syscall is mainly used by a listening socket wishing to establish a Transmission Control Protocol (TCP) connection; it is not used for User Datagram Protocol (UDP) communications.connect: The application uses the socket to establish a connection with a different listening socket, which may be on the local system or located on some external network. To connect over a network to a socket present on an external system, the socket must reference the external system’s address, (usually an Internet Protocol [IP] address), and the network port that a listening socket is bound to. The connect syscall is mainly used by a connecting socket wishing to make a TCP connection to a listening socket; it is not used for UDP communications.recv or recvfrom: Short for receive. The application reads data from the socket. The recv syscall can be used as a shortcut by certain applications that have already established a connection with another socket; recvfrom is used otherwise.send or sendto: The application sends data over the socket, which is transmitted to the corresponding socket on the other end of the connection. The send syscall is used as a shortcut by certain applications that have already established a connection; sendto is used otherwise.close: The application closes the established connection. This may be performed by the listening socket or the connecting socket, and is mainly needed to close TCP connections; UDP communications do not maintain the concept of a connection, so there is nothing to close.

HKEY_ are hives which holds which hold values

The additional folders listed under the ProfileList folder represent the different users located on the system. Within the Windows OS, user accounts are assigned a unique Security Identifier (SID) that is used to identify their user profile across the system. The first three SIDs are present on all modern Windows systems; they represent users that are used by the OS to launch certain system services and OS-level tasks. Regular user accounts with no special OS use begin with S-1-5-21.
As shown in Figure 1.1-78, the Profiles key contains a list of Globally Unique Identifier (GUID) values, which are present throughout the Windows OS. Windows uses GUIDs to refer to unique objects within the system, though GUIDs are not guaranteed to be unique across systems. In this case, each GUID represents a different network profile that this machine has been connected to. 

At this point in the lesson, you have reviewed and explored several key concepts intrinsic to the operation of modern OSs including: OS architecture, kernels, process management, memory management, file management, network management, I/O devices, and other interesting details regarding Windows and Linux OSs, such as the Windows registry and Linux configuration and log files.

As a future CDA, you must learn to apply your technical knowledge within a Cyber Protection Team (CPT) in order to meet mission goals. Ultimately, these mission goals involve investigating and securing networks and systems that are located in an increasingly complex digital landscape. Having a firm grasp on the basic OS concepts presented in this lesson act as a solid foundation to develop the additional skills required of a CDA.

Stages of Digital Forensics

  The digital forensics process can be divided into the following stages: 
  Identification of evidence sourcesPreservation of evidence sourcesAcquisition of data from evidence sourcesAnalysis and interpretation of the acquired dataPresentation of the analysis results

File carving is the process of reconstructing files by scanning the raw bytes of a disk, and attempting to piece together the files without the metadata information normally tracked by the filesystem. File carving may need to be performed during forensic investigations by law enforcement or government agencies, or during data recovery operations. Usually, file carving requires determining the type of filesystem represented by the data on the disk, then using this knowledge to locate and reconstruct the directory and record list held within the filesystem.

The most common types of metadata that are relevant to file forensics include:
Creation date and timeProgram or processes used to create the dataData creator or authorTechnical standards used Location on a device where the data was createdFile sizeData source Data qualityFile modifications or programs used to modify

Portable Executable Format

The Portable Executable (PE) format is a common file format across many types of executable files on Windows systems. The PE format contains a compiled executable program, along with instructions for how the OS should load that program into memory. The most common file types that make use of the PE format are:
Stand-alone executables (.exe)Dynamic-link libraries (.dll)Device driver files (.sys)Control panel items (.cpl)

Indicators of Compromise

In particular, note that the DOS header starts with the characters MZ, and the PE header starts with the characters PE. The error message within the DOS stub is also clearly visible. If you are able to locate these three items at the start of an unknown file, it is almost certainly a PE file.

Indicators of Compromise (IOC) are forensic artifacts that serve as evidence that an intrusion has occurred within a host or network. File metadata sometimes contains IOC information that can aid a forensic or security investigation. One common example is the OriginalFilename field present within PE metadata, as shown in Figure 1.1-95. Attackers who distribute PE files as malware payloads may forget to change the OriginalFilename field of the PE file — if the OriginalFilename of the malware is unique enough, it can be used to confidently identify malicious files.

File Hashes

  A file hash is a unique value that is calculated by running a file’s contents through a hashing function. Manipulating even one bit of a file is enough to change the entire resulting hash value, making file hashes incredibly useful for forensic and security investigations. Locating a file hash associated with a known malicious file is strong evidence that MCA has occurred. Hashing functions are also commonly used in many modern cryptographic algorithms.

  There are several different hashing functions in current use. Commonly-encountered hashing functions include Message Digest (MD) 5, Secure Hash Algorithm (SHA) 256, SHA512, and SHA1. Figure 1.1-97 shows the Get-FileHash PowerShell cmdlet being used to calculate the SHA256 hashes of two files on a Windows machine. (The sha256sum command can be used to calculate SHA256 file hashes on Linux machines.)

